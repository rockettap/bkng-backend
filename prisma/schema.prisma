generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int     @id @default(autoincrement())
  email        String? @unique
  passwordHash String?

  firstName  String? @db.VarChar(32)
  familyName String? @db.VarChar(32)
  avatarUrl  String?

  sub      String? @unique
  stripeId String? @unique

  // TODO: move to the GoogleCalendarIntegration
  // googleAccessToken  String?
  // googleRefreshToken String?

  Availability              Availability[]
  Booking                   Booking[]
  GoogleCalendarIntegration GoogleCalendarIntegration[]
  AppleCalendarIntegration  AppleCalendarIntegration[]
}

model GoogleCalendarIntegration {
  id           Int     @id @default(autoincrement())
  userId       Int
  accessToken  String
  refreshToken String?

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AppleCalendarIntegration {
  id       Int    @id @default(autoincrement())
  userId   Int
  username String
  password String

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Availability {
  userId       Int
  from         DateTime
  to           DateTime
  pricePerHour Int      @default(0)

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, from, to])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REFUNDED
}

model Booking {
  id              Int           @id @default(autoincrement())
  userId          Int
  from            DateTime
  to              DateTime
  pricePerHour    Int           @default(0)
  status          BookingStatus
  stripeSessionId String?       @unique

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
