generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  emailAuthMethod  EmailAuthMethod?
  googleAuthMethod GoogleAuthMethod?

  googleCalendarIntegration GoogleCalendarIntegration?
  appleCalendarIntegration  AppleCalendarIntegration?

  firstName  String? @db.VarChar(32)
  familyName String? @db.VarChar(32)
  avatarUrl  String?

  stripeId String? @unique

  Availability Availability[]
  Booking      Booking[]
}

model EmailAuthMethod {
  id           Int    @id @default(autoincrement())
  sellerId       Int    @unique
  email        String @unique
  passwordHash String

  user User @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}

model GoogleAuthMethod {
  id       Int    @id @default(autoincrement())
  sellerId   Int    @unique
  googleId String @unique

  user User @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}

model GoogleCalendarIntegration {
  id           Int     @id @default(autoincrement())
  sellerId       Int     @unique
  accessToken  String
  refreshToken String?

  user User @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}

model AppleCalendarIntegration {
  id       Int    @id @default(autoincrement())
  sellerId   Int    @unique
  username String
  password String

  user User @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}

model Availability {
  sellerId       Int
  from         DateTime
  to           DateTime
  pricePerHour Int      @default(0)

  user User @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@id([sellerId, from, to])
}

model Booking {
  id              Int           @id @default(autoincrement())
  sellerId          Int
  from            DateTime
  to              DateTime
  pricePerHour    Int           @default(0)
  status          BookingStatus
  stripeSessionId String?       @unique

  user User @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REFUNDED
}
